name: Generate Snake

# Controls when the action will run. This action runs every 6 hours.
on:
  schedule:
    # every 6 hours
    - cron: "0 */6 * * *"

  # This command allows us to run the Action automatically from the Actions tab.
  workflow_dispatch:

# The sequence of runs in this workflow:
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks repo under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Set up Git user info
      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Generates the snake
      - name: Generate Snake
        uses: Platane/snk@master
        id: snake-gif
        with:
          github_user_name: kokonaing-dev
          # these next 2 lines generate the files on a branch called "output". This keeps the main branch from cluttering up.
          gif_out_path: dist/github-contribution-grid-snake.gif
          svg_out_path: dist/github-contribution-grid-snake.svg

      # Show the status of the build. Makes it easier for debugging (if there's any issues).
      - name: Git Status
        run: git status

      # Commit and push the changes to the output branch
      - name: Commit and Push changes
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          git checkout -b output
          git add dist/*
          git commit -m "Generate snake contribution graph"
          git remote set-url origin https://kokonaing-dev:${{ secrets.PAT }}@github.com/kokonaing-dev/kokonaing-dev.git
          git push origin output --force

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: crazy-max/ghaction-github-pages@v2.1.3
        with:
          # the output branch we mentioned above
          target_branch: output
          build_dir: dist
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      # Optional: Add a step to check the directory content for debugging
      - name: List Output Directory
        run: ls -R dist
